{"version":3,"file":"static/js/830.b7c2f7b9.chunk.js","mappings":"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","sources":["components/errorBoundary/errorBoundary.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/searchForm/SearchForm.js","components/pages/MainPage.js"],"sourcesContent":["import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import {useState, useEffect} from \"react\";\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null)\n    const {getCharacter, clearError, process, setProcess} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n        const timerId = setInterval(updateChar, 60000)\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (newChar) => {\n        setChar(newChar)\n    }\n\n    const updateChar = () => {\n        clearError()\n\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onGetRandomChar = () => {\n        updateChar()\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={onGetRandomChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail}\n                 style={{objectFit: thumbnail.endsWith('image_not_available.jpg') ? 'contain' : 'cover'}}\n                 alt=\"Random character\"\n                 className=\"randomchar__img\"\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React, {useEffect, useRef, useState} from \"react\";\nimport './charList.scss';\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>\n            break\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n            break\n        case 'confirmed':\n            return <Component/>\n            break\n        case 'error':\n            return <ErrorMessage/>\n            break\n        default:\n            throw new Error('Unexpected process state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [chars, setChars] = useState([])\n    const [newItemLoading, setNewItemLoading] = useState(false)\n    const [offset, setOffset] = useState(210)\n    const [charEnded, setCharEnded] = useState(false)\n\n    const {process, setProcess, getAllCharacters} = useMarvelService()\n\n    useEffect(() => {\n        onRequest()\n    }, [])\n\n    const onCharsLoaded = (newCharList) => {\n        let ended= newCharList.length < 9\n\n        setChars(chars => [...chars, ...newCharList])\n        setNewItemLoading(false)\n        setOffset(offset => offset + 9)\n        setCharEnded(ended)\n    }\n\n    const itemRefs = useRef([])\n\n    const onFocus = (index) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'))\n        itemRefs.current[index].classList.add('char__item_selected')\n        itemRefs.current[index].focus()\n    }\n\n    const onRequest = (offset, initial) => {\n        setNewItemLoading(!initial)\n        getAllCharacters(offset)\n            .then(onCharsLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const renderAllChars = () => {\n        const items = chars.map((char, index) => {\n            return (\n                <CSSTransition key={index} timeout={500} classNames={'char__item'}>\n                    <li className=\"char__item\"\n                        key={char.id}\n                        ref={el => itemRefs.current[index] = el}\n                        tabIndex={index}\n                        onKeyDown={() => {\n                            props.onCharSelected(char.id)\n                            onFocus(index)\n                        }}\n                        onClick={() => {\n                            props.onCharSelected(char.id)\n                            onFocus(index)\n                        }}>\n                        <img  src={char.thumbnail} style={{objectFit: char.thumbnail.endsWith('image_not_available.jpg') ? 'contain' : 'cover'}}\n                              alt={char.name}/>\n                        <div className=\"char__name\">{char.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"char__list\">\n            {setContent(process, () => renderAllChars(), newItemLoading)}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{display: charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './charInfo.scss';\nimport {useEffect, useState} from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\nimport setContent from \"../../utils/setContent\";\n\nconst CharInfo = (props) =>{\n    const [char, setChar] = useState(null)\n    const {charId} = props\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService()\n\n    useEffect(() => {\n        onUpdateChars()\n    }, [charId])\n\n    const onUpdateChars = () => {\n\n        if (!charId) {\n            return\n        }\n\n        clearError()\n        getCharacter(charId)\n            .then(onCharsLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharsLoaded = (char) => {\n        setChar(char)\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = (data) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data.data\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail}\n                     style={{objectFit: thumbnail.endsWith('image_not_available.jpg') ? 'contain' : 'cover'}}\n                     alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics for this character'}\n                {\n                    comics?.map((item, i) => {\n                        if (i > 10) return\n\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link exac={'true'} to={`/comics/${item.resourceURI.replace(/\\D/g, '').slice(1)}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n\n}\nexport default CharInfo;","import './searchForm.scss'\r\nimport {ErrorMessage as FormikErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport {useState} from \"react\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport * as Yup from 'yup'\r\nimport {Link} from \"react-router-dom\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nconst SearchForm = () => {\r\n    const [result, setResult] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n    const {getCharacterByName, clearError, setProcess, error} = useMarvelService()\r\n\r\n    const searchCharacter = (query) => {\r\n        clearError()\r\n        setLoading(true)\r\n\r\n        getCharacterByName(query)\r\n            .then(onResultLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onResultLoaded = (result) => {\r\n        setLoading(false)\r\n        setResult(result)\r\n    }\r\n\r\n    const renderResult = () => {\r\n\r\n        return result ?\r\n            <div className=\"char__search-wrapper\">\r\n                <div className=\"char__search-success\">There is! Visit {result.name} page?</div>\r\n                <Link to={`/characters/${result.id}`} className=\"button button__secondary\">\r\n                    <div className=\"inner\">To page</div>\r\n                </Link>\r\n            </div> :\r\n            <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n            </div>\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null\r\n    console.log(errorMessage)\r\n    const content = (result) ? renderResult() : null\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik initialValues={{\r\n                charName: '',\r\n            }} validationSchema={Yup.object({\r\n                charName: Yup.string().required('This field is required')\r\n            })} onSubmit={({ charName }) => searchCharacter(charName)}>\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className={'char__search-wrapper'}>\r\n                        <Field id={'charName'}\r\n                               name={'charName'}\r\n                               placeholder={'Enter name'}\r\n                               type=\"text\"/>\r\n                        <button\r\n                            type={'submit'}\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className={'inner'}>Find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                    {errorMessage}\r\n                    {content}\r\n                </Form>\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import ErrorBoundary from \"../errorBoundary/errorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport {useState} from \"react\";\r\nimport SearchForm from \"../searchForm/SearchForm\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <SearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","this","setState","_jsx","ErrorMessage","props","children","Component","View","_ref","data","name","description","thumbnail","homepage","wiki","_jsxs","className","src","style","objectFit","endsWith","alt","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","newChar","id","Math","floor","random","then","setContent","onClick","mjolnir","newItemLoading","Spinner","Error","chars","setChars","_useState3","_useState4","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","onCharsLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","onFocus","index","current","forEach","item","classList","remove","add","focus","initial","items","map","CSSTransition","timeout","classNames","ref","el","tabIndex","onKeyDown","onCharSelected","TransitionGroup","component","renderAllChars","disabled","display","_data$data","comics","_Fragment","i","Link","exac","to","resourceURI","replace","slice","charId","onUpdateChars","result","setResult","loading","setLoading","getCharacterByName","onResultLoaded","errorMessage","console","log","content","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","query","Form","htmlFor","Field","placeholder","type","FormikErrorMessage","selectedChar","setSelectedChar","Helmet","RandomChar","CharList","CharInfo","SearchForm","decoration"],"sourceRoot":""}